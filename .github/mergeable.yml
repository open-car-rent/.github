version: 2
mergeable:
  # Auto-request reviews when PR is opened
  - when: pull_request.opened
    validate:
      - do: dependent
        changed:
          file: '*'
    pass:
      - do: request_review
        team_reviewers: ['org/Developers']

  # Main approval and validation rules
  - when: pull_request.*, pull_request_review.*
    validate:
      # Existing approval requirements
      - do: approvals
        min:
          count: 1
          message: "You need at least one approval to merge this PR"
        block:
          changes_requested: true
          message: "The PR contains change requests that needs to be resolved before merge"
        limit:
          teams: ['org/Developers']
      
      # Security File Protection
      - do: changeset
        must_exclude:
          file: ['.env*', '*.env', 'secrets/**', '*.key', '*.pem', '*.p12', '*.pfx', 'config/production.*', '*.secret']
          message: "🚨 Security files cannot be modified via PR. Please contact admin team."
      
      # Prevent Direct Commits to Main (blocks PRs from main-like branches)
      - do: dependent
        head:
          must_exclude:
            regex: '^(main|master|develop|release/.*)$'
            message: "🚫 Cannot create PR directly from protected branches. Please create a feature branch."
      
      # Git Flow Enforcement - Only develop can merge to main
      - do: dependent
        base: 'main'
        head:
          must_include:
            regex: '^develop$'
            message: |
              🔄 **Git Flow Violation!** 
              
              Direct merges to `main` are not allowed. Please follow our branching strategy:
              
              ✅ **Correct flow:**
              1. `feature-branch` → `develop` (for new features)
              2. `develop` → `main` (for releases)
              
              **What to do:**
              - Close this PR
              - Create a PR from your branch to `develop` instead
              - After review and merge to `develop`, create a release PR from `develop` to `main`
      
      # Prevent main from merging back to develop (one-way flow)
      - do: dependent
        base: 'develop'
        head:
          must_exclude:
            regex: '^(main|master)$'
            message: |
              🚫 **Reverse Flow Blocked!** 
              
              `main` cannot be merged back into `develop`. This breaks our Git flow.
              
              **If you need to sync:**
              - Use `git rebase develop` on your feature branch
              - Or create a hotfix branch from `main` if this is a critical fix
      
      # Commit Message Validation
      - do: commit
        message:
          regex: '^(feat|fix|docs|style|refactor|test|chore|ci|perf)(\(.+\))?: .{1,72}$'
          message: "📝 Commit messages must follow conventional format: type(scope): description. Types: feat, fix, docs, style, refactor, test, chore, ci, perf"

  # Stale PR Management - Check daily and delete stale PRs
  - when: schedule.repository
    validate:
      - do: stale
        days: 30
        type: 'pull_request'
        ignore_drafts: true
    pass:
      - do: comment
        payload:
          body: |
            🗑️ This PR has been inactive for 30 days and will be automatically closed.
            
            If you still need this PR:
            - Add a comment to keep it active
            - Update the PR with new commits
            - Convert to draft if still work in progress
      - do: labels
        add: ['stale', 'auto-close-pending']
  
  # Actually close stale PRs after warning period
  - when: schedule.repository
    validate:
      - do: stale
        days: 35
        type: 'pull_request'
        ignore_drafts: true
    pass:
      - do: close
        message: "🔒 Auto-closed due to 35 days of inactivity. Feel free to reopen if needed."
